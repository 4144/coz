#!/usr/bin/env python

import argparse
import copy
import os
import subprocess
import sys

from os.path import abspath, curdir, dirname, sep as path_sep

# The main function, called after building all parsers
def main(parser):
  # By default, parse all arguments
  parsed_args = sys.argv[1:]
  remaining_args = []
  # If there is a '---' separator, only parse arguments before the separator
  if '---' in sys.argv:
    separator_index = sys.argv.index('---')
    parsed_args = sys.argv[1:separator_index]
    remaining_args = sys.argv[separator_index+1:]
  # Pass the un-parsed arguments to the parser result
  parser.set_defaults(remaining_args=remaining_args)
  # Parse it
  args = parser.parse_args(parsed_args)
  # Call the parser's handler (set depending on which sub-command is run)
  args.func(args)

# Handle the `run` sub-command
def coz_run(args):
  # Ensure the user specified a command after the '---' separator
  if len(args.remaining_args) == 0:
    print 'error: specify a command to profile after `---`\n'
    args.parser.print_help()
    exit(1)
  
  env = copy.deepcopy(os.environ)
  coz_prefix = dirname(dirname(abspath(sys.argv[0])))
  coz_runtime = coz_prefix + path_sep + 'lib/libcausal.so'
  
  if 'LD_PRELOAD' in env:
    env['LD_PRELOAD'] += ':' + coz_runtime
  else:
    env['LD_PRELOAD'] = coz_runtime
  
  if len(args.binary_scope) > 0:
    env['COZ_BINARY_SCOPE'] = '\t'.join(args.binary_scope)
  else:
    env['COZ_BINARY_SCOPE'] = 'MAIN'
  
  if len(args.source_scope) > 0:
    env['COZ_SOURCE_SCOPE'] = '\t'.join(args.source_scope)
  else:
    env['COZ_SOURCE_SCOPE'] = '%'
  
  env['COZ_PROGRESS_POINTS'] = '\t'.join(args.progress)
  
  env['COZ_OUTPUT'] = args.output
  
  if args.end_to_end:
    env['COZ_END_TO_END'] = '1'
  
  if args.sample_only:
    env['COZ_SAMPLE_ONLY'] = '1'
  
  if args.fixed_line:
    env['COZ_FIXED_LINE'] = args.fixed_line
  
  if args.fixed_speedup:
    env['COZ_FIXED_SPEEDUP'] = str(args.fixed_speedup)
  
  result = subprocess.call(args.remaining_args, env=env)
  exit(result)
  
# Handle the `process` sub-command
def coz_process(args):
  pass

# Handle the `plot` sub-command
def coz_plot(args):
  try:
    import ggplot
    print 'success'
  except ImportError as e:
    print 'Package `ggplot` was not found. Install it with `pip install ggplot`.'
    print 'Alternately, you can produce a CSV with `coz process` and plot it yourself.'

def line_ref(val):
  try:
    (filename, line) = val.rsplit(':', 1)
    line = int(line)
    return filename + ':' + str(line)
  except:
    msg = "Invalid line reference %r. The format is <source file>:<line number>." % val
    raise argparse.ArgumentTypeError(msg)

# Build the parser
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers()

# Build the parser for the `run` sub-command
parser_run = subparsers.add_parser('run',
                                   usage='%(prog)s [profiling options] --- <command> [args]',
                                   help='Run a program with coz to collect a causal profile.')

# Add common profiler options
parser_run.add_argument('--binary-scope', '-b', metavar='<file pattern>', action='append', default=[],
                        help='Profile matching executables. The \'%%\' as a wildcard, or \'MAIN\' to include the main executable (default=MAIN)')

parser_run.add_argument('--source-scope', '-s', metavar='<file pattern>', action='append', default=[],
                        help='Profile matching source files. Use \'%%\' as a wildcard. (default=%%)')

parser_run.add_argument('--progress', '-p', metavar='<source file>:<line number>', type=line_ref, action='append', default=[],
                        help='Add a sampling-based progress point')

parser_run.add_argument('--output', '-o', metavar='<profile output>', default=abspath(curdir+path_sep+'profile.coz'),
                        help='Profiler output (default=`profile.coz`)')

parser_run.add_argument('--end-to-end', action='store_true', default=False,
                        help='Run a single performance experiment per-execution')

# Add extra profiler options
parser_run.add_argument('--sample-only', action='store_true', default=False,
                              help='Collect a legacy sampling-only profile.')

parser_run.add_argument('--fixed-line', metavar='<source file>:<line number>', default=None,
                              help='Evaluate optimizations of a specific source line')

parser_run.add_argument('--fixed-speedup', type=int, metavar='<speedup> (0-100)', choices=range(0, 101), default=None,
                              help='Evaluate optimizations of a specific amount')

# Use defaults to recover handler function and parser object from parser output
parser_run.set_defaults(func=coz_run, parser=parser_run)

# Build the parser for the `process` sub-command
parser_process = subparsers.add_parser('process', help='Process a causal profile to produce a CSV of program speedups.')
parser_process.add_argument('--input', '-i', metavar='<input profile>', default='profile.coz',
                            help='Profile to process (default=`profile.coz`)')
parser_process.add_argument('--output', '-o', metavar='<output>', default='profile.csv',
                            help='Output file (default=`profile.csv`)')

# Use defaults to recover handler function and parser object from parser output
parser_process.set_defaults(func=coz_process, parser=parser_process)

# Build the parser for the `plot` sub-command
parser_plot = subparsers.add_parser('plot', help='Plot the speedup results from one or more causal profiling runs.')
parser_plot.add_argument('--input', '-i', metavar='<input profile>', default='profile.coz',
                         help='Profile to plot (default=`profile.coz`)')
parser_plot.add_argument('--output', '-o', metavar='<output file>',
                         help='Save plot to this file')

# Use defaults to recover handler function and parser object from parser output
parser_plot.set_defaults(func=coz_plot, parser=parser_plot)

# Call main
main(parser)
